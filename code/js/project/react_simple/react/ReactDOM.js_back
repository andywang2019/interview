import React from './React';


// 从 React.js 导入需要的函数和变量
let currentComponent = null
let hookIndex = 0
const componentInstances = new WeakMap()
let rootContainer = null
let rootElement = null
// 组件实例结构
function createComponentInstance() {
    return {
        hooks: [],
        effects: [],
        element: null,
        component: null,
        props: null,
    }
}

// 执行副作用
function executeEffects(instance) {
    instance.effects.forEach((effect) => {
        setTimeout(() => {
            try {
                const cleanup = effect.callback()
                if (typeof cleanup === "function") {
                    if (instance.hooks[effect.index]) {
                        instance.hooks[effect.index].cleanup = cleanup
                    }
                }
            } catch (error) {
                console.error("Effect execution error:", error)
            }
        }, 0)
    })
}
// 设置DOM属性
function setAttributes(dom, props) {
    Object.keys(props)
        .filter(key => key !== "children")
        .forEach(name => {
            const value = props[name];

            if (name === 'className') {
                dom.setAttribute('class', value);
            }
            else if (name.startsWith('on')) {
                const eventType = name.toLowerCase().substring(2);
                dom.addEventListener(eventType, value);
            }
            else if (name === 'style' && typeof value === 'object') {
                Object.assign(dom.style, value);
            }
            else if (typeof value === 'boolean') {
                value ? dom.setAttribute(name, '') : dom.removeAttribute(name);
            }
            else {
                dom.setAttribute(name, value);
            }
        });
}



// 创建组件元素
function createComponentElement(element) {
    const { type: Component, props } = element;

    // 检查Component是否有效
    if (typeof Component !== 'function') {
        console.error('Invalid component type:', Component);
        return { type: 'TEXT_ELEMENT', props: { nodeValue: '' } };
    }


    // 处理函数组件
    if (!Component.prototype || !Component.prototype.isReactComponent) {
        try {


// 获取或创建组件实例
            let instance = componentInstances.get(element)
            if (!instance) {
                instance = createComponentInstance()
                componentInstances.set(element, instance)
            }

            instance.component = Component
            instance.props = props

            // 设置当前组件上下文
            currentComponent = instance
            hookIndex = 0
            instance.effects = []

            return Component(props);

            // 执行副作用
            executeEffects(instance)

        } catch (error) {
            console.error('Function component error:', error);
            return { type: 'TEXT_ELEMENT', props: { nodeValue: '' } };
        }
    }

    // 处理类组件
    try {
        const instance = new Component(props);
        if (typeof instance.render !== 'function') {
            throw new Error('Class component missing render method');
        }
        const renderedElement = instance.render();
        renderedElement._instance = instance;
        instance._currentElement = renderedElement;

        return renderedElement;
    } catch (error) {
        console.error('Class component error:', error);
        return { type: 'TEXT_ELEMENT', props: { nodeValue: '' } };
    }
}

// 渲染实现
function render(element, container) {
    console.log(element, container);
    if (!container || !container.nodeType) {
        console.error('Invalid container:', container);
        return;
    }

    // 保存根容器和元素，用于重新渲染
    rootContainer = container
    rootElement = element

    console.log("Set rootContainer:", rootContainer, "rootElement:", rootElement)

    // 清空容器
    while (container.firstChild) {
        container.removeChild(container.firstChild);
    }


    _render(element, container);
}
function _render(element, container) {
    // 1. 处理 null / undefined / false 等无效元素
    if (!element) return;

    // 2. 处理组件类型（函数或类组件）
    if (typeof element.type === 'function') {


        element = createComponentElement(element); // 返回实际渲染的 VDOM
        _render(element, container); // 递归渲染


        return;
    }

    // 3. 创建真实 DOM 节点
    const dom =
        element.type === 'TEXT_ELEMENT'
            ? document.createTextNode(element.props.nodeValue)
            : document.createElement(element.type);

    // 4. 设置属性（排除 children）
    if (element.type !== 'TEXT_ELEMENT') {
        setAttributes(dom, element.props);
    }

    // 5. 递归渲染子节点
    const children = element.props.children || [];
    children.forEach(child => _render(child, dom));

    // 6. 插入当前 DOM 到父容器
    container.appendChild(dom);
    // ✅ 核心：如果这个 element 是组件 render 出来的，绑定 DOM
    if (element._instance) {
        element._instance._currentDOM = dom;
    }
    return dom;
}


// 调度重新渲染
// 调度重新渲染
function scheduleRerender(instance) {
    console.log("scheduleRerender called with instance:", instance)

    if (!rootContainer) {
        console.error("rootContainer is not initialized. Make sure ReactDOM.render has been called.")
        return
    }

    if (!rootElement) {
        console.error("rootElement is not initialized. Make sure ReactDOM.render has been called.")
        return
    }

    setTimeout(() => {
        console.log("Executing rerender, rootContainer:", rootContainer, "rootElement:", rootElement)
        try {
            // 清空容器
            while (rootContainer.firstChild) {
                rootContainer.removeChild(rootContainer.firstChild)
            }

            console.log("Re-rendering application...")
            // 重新渲染整个应用
            _render(rootElement, rootContainer)
            console.log("Re-render complete")
        } catch (error) {
            console.error("Error during re-render:", error)
        }
    }, 0)
}

// 调度重新渲染（供 React.js 使用）
function scheduleRerender2(instance) {
    setTimeout(() => {
        if (instance.element && instance.component && instance.props) {
            // 清空当前内容
            while (instance.element.firstChild) {
                instance.element.removeChild(instance.element.firstChild)
            }

            // 重新渲染整个应用
            _render(rootElement, rootContainer)
            /*
            // 重新渲染
            currentComponent = instance
            hookIndex = 0
            instance.effects = []

            try {
                const newElement = instance.component(instance.props)
                _render(newElement, instance.element)

                // 执行副作用
                executeEffects(instance)
            } catch (error) {
                console.error("Component render error:", error)
            } finally {
                currentComponent = null
                hookIndex = 0
            }
            */
        }
    }, 0)
}

const ReactDOM = {
    render,
    // 可以添加其他ReactDOM API
};


// 导出供 React.js 使用的函数
if (typeof window !== "undefined") {
    window.scheduleRerender = scheduleRerender
    window.getCurrentComponent = () => currentComponent
    window.setCurrentComponent = (component) => {
        currentComponent = component
    }
    window.getHookIndex = () => hookIndex
    window.setHookIndex = (index) => {
        hookIndex = index
    }
    window.componentInstances = componentInstances
    window.createComponentInstance = createComponentInstance
    window.executeEffects = executeEffects
}

export default ReactDOM;